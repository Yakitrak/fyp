[
  {
    "id": "1",
    "question": "Print out the fruits in order: <code> apple, banana, cherry </code>",
    "starter": true,
    "startCode": [
      {
        "id": 0,
        "line": "# Drag correct blocks above this! Nothing below is marked!"
      },
      {
        "id": 1,
        "line": "fruits = ['apple', 'banana', 'cherry']"
      },
      {
        "id": 2,
        "line": "for fruit in fruits:"
      },
      {
        "id": 3,
        "line": "print(cherry)"
      },
      {
        "id": 4,
        "line": "print(fruit)"
      }
    ],
    "correctCode": [
      {
        "id": 1,
        "indent": 0
      },
      {
        "id": 2,
        "indent": 0
      },
      {
        "id": 4,
        "indent": 1
      }
    ],
    "tags": ["list", "control"],
    "skills": {
      "required": {
        "control": 0,
        "functions": 0,
        "readwrite": 0,
        "bool_operators": 0,
        "exceptions": 0,
        "list": 0,
        "dictionary": 0
      },
      "granted": {
        "list": 20,
        "control": 20
      }
    }
  },
  {
    "id": "2",
    "question": "Define and use the hello function to print  <code> hello bill </code> then  <code> hello jim </code>",
    "starter": true,
    "startCode": [
      {
        "id": 0,
        "line": "# Drag correct blocks above this! Nothing below is marked!"
      },
      {
        "id": 1,
        "line": "hello('Jim')"
      },
      {
        "id": 2,
        "line": "print('Hello ', name)"
      },
      {
        "id": 3,
        "line": "hello('Bill')"
      },
      {
        "id": 4,
        "line": "def hello(Bill):"
      },
      {
        "id": 5,
        "line": "def hello(name):"
      }
    ],
    "correctCode": [
      {
        "id": 5,
        "indent": 0
      },
      {
        "id": 2,
        "indent": 1
      },
      {
        "id": 3,
        "indent": 0
      },
      {
        "id": 1,
        "indent": 0
      }
    ],
    "tags": ["functions"],
    "skills": {
      "required": {
        "control": 0,
        "functions": 0,
        "readwrite": 0,
        "bool_operators": 0,
        "exceptions": 0,
        "list": 0,
        "dictionary": 0
      },
      "granted": {
        "functions": 20
      }
    }
  },
  {
    "id": "3",
    "question": "Declare and append to the animal list, then print them out in order:  <code> cat, dog, lion </code>",
    "starter": true,
    "startCode": [
      {
        "id": 0,
        "line": "# Drag correct blocks above this! Nothing below is marked!"
      },
      {
        "id": 1,
        "line": "animals = []"
      },
      {
        "id": 2,
        "line": "animals.append('tree')"
      },
      {
        "id": 3,
        "line": "animals.append('cat')"
      },
      {
        "id": 4,
        "line": "animals.append('dog')"
      },
      {
        "id": 5,
        "line": "for animal in animals:"
      },
      {
        "id": 6,
        "line": "animals.append('lion')"
      },
      {
        "id": 7,
        "line": "print(animal)"
      }
    ],
    "correctCode": [
      {
        "id": 1,
        "indent": 0
      },
      {
        "id": 3,
        "indent": 0
      },
      {
        "id": 4,
        "indent": 0
      },
      {
        "id": 6,
        "indent": 0
      },
      {
        "id": 5,
        "indent": 0
      },
      {
        "id": 7,
        "indent": 1
      }
    ],
    "tags": ["list", "control"],
    "skills": {
      "required": {
        "control": 20,
        "functions": 0,
        "readwrite": 0,
        "bool_operators": 0,
        "exceptions": 0,
        "list": 0,
        "dictionary": 0
      },
      "granted": {
        "list": 20,
        "control": 20
      }
    }
  },
  {
    "id": "4",
    "question": "Print out every 3rd element in the list 'numbers' starting at 0, such as: <code>  0,3,6 </code>",
    "starter": false,
    "startCode": [
      {
        "id": 0,
        "line": "# Drag correct blocks above this! Nothing below is marked!"
      },
      {
        "id": 1,
        "line": "print(numbers[i])"
      },
      {
        "id": 2,
        "line": "numbers = [0,1,2,3,4,5,6,7]"
      },
      {
        "id": 3,
        "line": "while i < len(numbers):"
      },
      {
        "id": 4,
        "line": "i = i + 3"
      },
      {
        "id": 5,
        "line": "i = 0"
      },
      {
        "id": 6,
        "line": "i = 1"
      }
    ],
    "correctCode": [
      {
        "id": 2,
        "indent": 0
      },
      {
        "id": 5,
        "indent": 0
      },
      {
        "id": 3,
        "indent": 0
      },
      {
        "id": 1,
        "indent": 1
      },
      {
        "id": 4,
        "indent": 1
      }
    ],
    "tags": ["list", "control"],
    "skills": {
      "required": {
        "list": 30,
        "control": 30,
        "functions": 0,
        "readwrite": 0,
        "bool_operators": 0,
        "exceptions": 0,
        "list": 0,
        "dictionary": 0
      },
      "granted": {
        "list": 20,
        "control": 20
      }
    }
  },
  {
    "id": "5",
    "question": "Print out the all the contacts in the 'contact' dictionary except Dave's contact",
    "starter": false,
    "startCode": [
      {
        "id": 0,
        "line": "# Drag correct blocks above this! Nothing below is marked!"
      },
      {
        "id": 1,
        "line": "del contacts['Dave']"
      },
      {
        "id": 2,
        "line": "contacts = {\n 'Billy' : '07700 900631', \n 'Dave' : '07700 900402',\n 'Sam' : '07700 900112' \n}"
      },
      {
        "id": 3,
        "line": "del contacts['07700 900112']"
      },
      {
        "id": 4,
        "line": "print(contacts)"
      }
    ],
    "correctCode": [
      {
        "id": 1,
        "indent": 0
      },
      {
        "id": 2,
        "indent": 0
      },
      {
        "id": 4,
        "indent": 0
      }
    ],
    "tags": ["dictionary"],
    "skills": {
      "required": {
        "list": 0,
        "control": 0,
        "functions": 0,
        "readwrite": 0,
        "bool_operators": 0,
        "exceptions": 0,
        "dictionary": 0
      },
      "granted": {
        "dictionary": 20
      }
    }
  },
  {
    "id": "6",
    "question": "Try and write 'Any Text' to the file <code> PyParson.txt </code> using try, except and finally to ensure errors are handled correctly.",
    "starter": false,
    "startCode": [
      {
        "id": 0,
        "line": "# Drag correct blocks above this! Nothing below is marked!"
      },
      {
        "id": 1,
        "line": "catch:"
      },
      {
        "id": 2,
        "line": "except:"
      },
      {
        "id": 3,
        "line": "print('An exception occurred')"
      },
      {
        "id": 4,
        "line": "print(x)"
      },
      {
        "id": 5,
        "line": "print('x may not exist')"
      },
      {
        "id": 6,
        "line": "try:"
      },
      {
        "id": 7,
        "line": "finally:"
      }
    ],
    "correctCode": [
      {
        "id": 6,
        "indent": 0
      },
      {
        "id": 4,
        "indent": 1
      },
      {
        "id": 2,
        "indent": 0
      },     {
        "id": 3,
        "indent": 1
      },
      {
        "id": 7,
        "indent": 0
      },
      {
        "id": 5,
        "indent": 1
      }
    ],
    "tags": ["exceptions"],
    "skills": {
      "required": {
        "control": 0,
        "functions": 0,
        "readwrite": 0,
        "bool_operators": 0,
        "exceptions": 0,
        "list": 0,
        "dictionary": 0
      },
      "granted": {
        "exceptions": 20
      }
    }
  },
  {
    "id": "7",
    "question": "Try and write 'Any Text' to the file 'PyParson.txt' using try, except and finally to ensure errors are handled correctly.",
    "starter": false,
    "startCode": [
      {
        "id": 0,
        "line": "# Drag correct blocks above this! Nothing below is marked!"
      },
      {
        "id": 1,
        "line": "finally:"
      },
      {
        "id": 2,
        "line": "print('Error: unable to write to the file')"
      },
      {
        "id": 3,
        "line": "f.close()"
      },
      {
        "id": 4,
        "line": "f.write('Any text')"
      },
      {
        "id": 5,
        "line": "f = open('PyParson.txt', 'w')"
      },
      {
        "id": 6,
        "line": "except:"
      },
      {
        "id": 7,
        "line": "f = open('PyParson.txt', 'write')"
      },
      {
        "id": 8,
        "line": "try:"
      }
    ],
    "correctCode": [
      {
        "id": 8,
        "indent": 0
      },
      {
        "id": 5,
        "indent": 1
      },
      {
        "id": 4,
        "indent": 1
      },
      {
        "id": 6,
        "indent": 0
      },
      {
        "id": 2,
        "indent": 1
      },
      {
        "id": 1,
        "indent": 0
      },
      {
        "id": 3,
        "indent": 1
      }
    ],
    "tags": [
      "exceptions",
      "readwrite"
    ],
    "skills": {
      "required": {
        "exceptions": 20,
        "readwrite": 20,
        "control": 0,
        "functions": 0,
        "bool_operators": 0,
        "list": 0,
        "dictionary": 0
      },
      "granted": {
        "exceptions": 20,
        "readwrite": 20
      }
    }
  },
  {
    "id": "8",
    "question": "Create a file called <code> file.txt </code> and write 'Hello World' then write 'This is our new text file' in the next line.",
    "starter": false,
    "startCode": [
      {
        "id": 0,
        "line": "# Drag correct blocks above this! Nothing below is marked!"
      },
      {
        "id": 1,
        "line": "file.write('Hello World /n')"
      },
      {
        "id": 2,
        "line": "file.write('Hello World')"
      },
      {
        "id": 3,
        "line": "file = open('file.txt', 'w')"
      },
      {
        "id": 4,
        "line": "file.write('This is our new text file')"
      },
      {
        "id": 5,
        "line": "file.close()"
      }
    ],
    "correctCode": [
      {
        "id": 3,
        "indent": 0
      },
      {
        "id": 2,
        "indent": 0
      },
      {
        "id": 4,
        "indent": 0
      },
      {
        "id": 5,
        "indent": 0
      }
    ],
    "tags": ["readwrite"],
    "skills": {
      "required": {
        "control": 0,
        "functions": 0,
        "readwrite": 0,
        "bool_operators": 0,
        "exceptions": 0,
        "list": 0,
        "dictionary": 0
      },
      "granted": {
        "readwrite": 20
      }
    }
  },
  {
    "id": "9",
    "question": "Using the input number, print if the number is even or odd.",
    "starter": false,
    "startCode": [
      {
        "id": 0,
        "line": "# Drag correct blocks above this! Nothing below is marked!"
      },
      {
        "id": 1,
        "line": "number = int(input('Enter a number: '))"
      },
      {
        "id": 2,
        "line": "print(number, ' is even.')"
      },
      {
        "id": 3,
        "line": "else:"
      },
      {
        "id": 4,
        "line": "if number % 2 == 0:"
      },
      {
        "id": 5,
        "line": "if number / 2 == 0:"
      },
      {
        "id": 6,
        "line": "print(number, ' is odd.')"
      }
    ],
    "correctCode": [
      {
        "id": 1,
        "indent": 0
      },
      {
        "id": 4,
        "indent": 0
      },
      {
        "id": 2,
        "indent": 1
      },
      {
        "id": 3,
        "indent": 0
      },
      {
        "id": 6,
        "indent": 1
      }
    ],
    "tags": ["bool_operators"],
    "skills": {
      "required": {
        "list": 0,
        "control": 0,
        "functions": 0,
        "readwrite": 0,
        "bool_operators": 0,
        "exceptions": 0,
        "list": 0,
        "dictionary": 0
      },
      "granted": {
        "bool_operators": 20
      }
    }
  },
  {
    "id": "10",
    "question": "Print 'You are an adult' if the age if input is 18 or over, print 'You are a teenager' if age is between 13 - 17 or 'You are young' if none of the other conditions are true",
    "starter": false,
    "startCode": [
      {
        "id": 0,
        "line": "# Drag correct blocks above this! Nothing below is marked!"
      },
      {
        "id": 1,
        "line": "print('You are an adult')"
      },
      {
        "id": 2,
        "line": "elif (age >= 13):"
      },
      {
        "id": 3,
        "line": "age = int(input('Enter your age: '))"
      },
      {
        "id": 4,
        "line": "if (age >= 18):"
      },
      {
        "id": 5,
        "line": "print('You are a teenager')"
      },
      {
        "id": 6,
        "line": "else:"
      },
      {
        "id": 7,
        "line": "print('You are young')"
      },
      {
        "id": 8,
        "line": "if (age > 18):"
      },
      {
        "id": 9,
        "line": "if (age > 13):"
      }
    ],
    "correctCode": [
      {
        "id": 3,
        "indent": 0
      },
      {
        "id": 4,
        "indent": 0
      },
      {
        "id": 1,
        "indent": 0
      },
      {
        "id": 2,
        "indent": 0
      },
      {
        "id": 5,
        "indent": 0
      },
      {
        "id": 6,
        "indent": 0
      },
      {
        "id": 7,
        "indent": 0
      }
    ],
    "tags": ["bool_operators"],
    "skills": {
      "required": {
        "bool_operators": 15,
        "control": 0,
        "functions": 0,
        "readwrite": 0,
        "exceptions": 0,
        "list": 0,
        "dictionary": 0
      },
      "granted": {
        "bool_operators": 20
      }
    }
  },
  {
    "id": "11",
    "question": "Declare the dictionary <code> dictionary </code>, and set the age to 19, then set the address to 'Town'. Lastly delete the email and print out the dictionary.",
    "starter": false,
    "startCode": [
      {
        "id": 0,
        "line": "# Drag correct blocks above this! Nothing below is marked!"
      },
      {
        "id": 1,
        "line": "jake('address') = 'Town"
      },
      {
        "id": 2,
        "line": "jake = {'name':'jake', 'age': 18, 'email': 'wrong@mail.com'}"
      },
      {
        "id": 3,
        "line": "del jake['email']"
      },
      {
        "id": 4,
        "line": "jake('age') = 19"
      },
      {
        "id": 5,
        "line": "jake['age'] = 19"
      },
      {
        "id": 6,
        "line": "jake['address'] = 'Town'"
      },
      {
        "id": 7,
        "line": "print(jake)"
      }
    ],
    "correctCode": [
      {
        "id": 2,
        "indent": 0
      },
      {
        "id": 5,
        "indent": 0
      },
      {
        "id": 6,
        "indent": 0
      },
      {
        "id": 3,
        "indent": 0
      },
      {
        "id": 7,
        "indent": 0
      }
    ],
    "tags": ["dictionary"],
    "skills": {
      "required": {
        "dictionary": 20,
        "control": 0,
        "functions": 0,
        "readwrite": 0,
        "bool_operators": 0,
        "exceptions": 0,
        "list": 0
      },
      "granted": {
        "dictionary": 40
      }
    }
  },
  {
    "id": "12",
    "question": "Using list comprehension print out the squared numbers of numbers from 1 to 10 which are odd. It should print: <code> [1, 9, 25, 49, 81] </code> ",
    "starter": false,
    "startCode": [
      {
        "id": 0,
        "line": "# Drag correct blocks above this! Nothing below is marked!"
      },
      {
        "id": 1,
        "line": "my_list = [x*x for x in range(1,10) if x%2 == 0]"
      },
      {
        "id": 2,
        "line": "my_list = [x*x for x in range(1,10) if x%2 != 0]"
      },
      {
        "id": 3,
        "line": "print(my_list)"
      }
    ],
    "correctCode": [
      {
        "id": 2,
        "indent": 0
      },
      {
        "id": 3,
        "indent": 0
      }
    ],
    "tags": ["list", "control", "bool_operators"],
    "skills": {
      "required": {
        "list": 40,
        "control": 40,
        "bool_operators": 20,
        "functions": 0,
        "readwrite": 0,
        "exceptions": 0,
        "dictionary": 0
      },
      "granted": {
        "list": 20,
        "control": 20,
        "bool_operators": 20
      }
    }
  },
  {
    "id": "13",
    "question": "Define a function which prints 'No presents for you' if the name is equal to 'bad', + else it prints 'You will get a [present]'. The default present is 'bike'. Next declare a dictionary <code> people </code> using the 'dict' function with Jake as good and Dave as bad. Test the function by calling it for Jake and Dave using the dictionary",
    "starter": false,
    "startCode": [
      {
        "id": 0,
        "line": "# Drag correct blocks above this! Nothing below is marked!"
      },
      {
        "id": 1,
        "line": "if (name == 'bad'):"
      },
      {
        "id": 2,
        "line": "print('No presents for you!')"
      },
      {
        "id": 3,
        "line": "people = dict(Jake='bad', Dave='good')"
      },
      {
        "id": 4,
        "line": "def santa(name, present='bike'):"
      },
      {
        "id": 5,
        "line": "if (name = 'bad'):"
      },
      {
        "id": 6,
        "line": "santa(people['Jake'])"
      },
      {
        "id": 7,
        "line": "santa(people['Dave'])"
      },
      {
        "id": 8,
        "line": "else:"
      },
      {
        "id": 9,
        "line": "def santa(name, present):"
      },
      {
        "id": 10,
        "line": "print('You will get a ', present)"
      }
    ],
    "correctCode": [
      {
        "id": 4,
        "indent": 0
      },
      {
        "id": 1,
        "indent": 1
      },
      {
        "id": 2,
        "indent": 2
      },
      {
        "id": 8,
        "indent": 1
      },
      {
        "id": 10,
        "indent": 2
      },
      {
        "id": 3,
        "indent": 0
      },
      {
        "id": 6,
        "indent": 0
      },
      {
        "id": 7,
        "indent": 0
      }
    ],
    "tags": ["functions", "dictionary", "bool_operators"],
    "skills": {
      "required": {
        "functions": 20,
        "dictionary": 40,
        "bool_operators": 30,
        "control": 0,
        "readwrite": 0,
        "exceptions": 0,
        "list": 0
      },
      "granted": {
        "functions": 20,
        "dictionary": 15,
        "bool_operators": 20
      }
    }
  },
  {
    "id": "14",
    "question": "Firstly import the <code> functools </code> library from <code> partial </code>. Define a function which returns the product of 2 numbers, then call this as a partial function with 4. Lastly print the result.",
    "starter": false,
    "startCode": [
      {
        "id": 0,
        "line": "# Drag correct blocks above this! Nothing below is marked!"
      },
      {
        "id": 1,
        "line": "partial_result = partial(multiply,4)"
      },
      {
        "id": 2,
        "line": "partial_result = multiple(partial, 4)"
      },
      {
        "id": 3,
        "line": "print(partial_result)"
      },
      {
        "id": 4,
        "line": "def multiply(x,y):"
      },
      {
        "id": 5,
        "line": "import partial from functools"
      },
      {
        "id": 6,
        "line": "return x * y"
      },
      {
        "id": 7,
        "line": "from functools import partial"
      }
    ],
    "correctCode": [
      {
        "id": 7,
        "indent": 0
      },
      {
        "id": 4,
        "indent": 0
      },
      {
        "id": 6,
        "indent": 1
      },
      {
        "id": 1,
        "indent": 0
      },
      {
        "id": 3,
        "indent": 0
      }
    ],
    "tags": ["functions"],
    "skills": {
      "required": {
        "functions": 50,
        "control": 0,
        "readwrite": 0,
        "bool_operators": 0,
        "exceptions": 0,
        "list": 0,
        "dictionary": 0
      },
      "granted": {
        "functions": 20
      }
    }
  },
  {
    "id": "15",
    "question": "Print all the letters in <code> 'XPyParsonX' </code> except <code> 'x' </code>",
    "starter": false,
    "startCode": [
      {
        "id": 0,
        "line": "# Drag correct blocks above this! Nothing below is marked!"
      },
      {
        "id": 1,
        "line": "continue"
      },
      {
        "id": 2,
        "line": "if (letter == 'x'): "
      },
      {
        "id": 3,
        "line": "break"
      },
      {
        "id": 4,
        "line": "print('Letter :', letter)"
      },
      {
        "id": 5,
        "line": "for letter of 'XPyParsonX':"
      },
      {
        "id": 6,
        "line": "for letter in 'XPyParsanX':"
      }
    ],
    "correctCode": [
      {
        "id": 6,
        "indent": 0
      },
      {
        "id": 2,
        "indent": 1
      },
      {
        "id": 1,
        "indent": 2
      },
      {
        "id": 4,
        "indent": 1
      }
    ],
    "tags": ["control"],
    "skills": {
      "required": {
        "control": 40,
        "functions": 0,
        "readwrite": 0,
        "bool_operators": 0,
        "exceptions": 0,
        "list": 0,
        "dictionary": 0
      },
      "granted": {
        "control": 20
      }
    }
  }
]